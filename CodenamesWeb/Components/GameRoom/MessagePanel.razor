@*ready to clear*@
<div class="d-flex flex-column br-default messages-field-layout overflow-hidden">
    @*ready to clear*@
    <div class="h-100 d-flex flex-column messages-panel">
        <Message Item="messages[0]"></Message>
        <Message Item="messages[1]"></Message>
        <Message Item="messages[2]"></Message>
        <Message Item="messages[3]"></Message>
        <Message Item="messages[1]"></Message>
        <Message Item="messages[3]"></Message>
        <Message Item="messages[0]"></Message>
        <Message Item="messages[1]"></Message>
        <Message Item="messages[1]"></Message>
        <Message Item="messages[1]"></Message>
        <Message Item="messages[1]"></Message>
    </div>
    @if(IsCaptian)
    {
        @*ready to clear*@
        <div class="d-flex flex-column message-input-layout">
            @*ready to clear*@
            <div class="d-flex m-0 justify-content-between message-input-field">
                @*ready to clear*@
                <input 
                    @bind:event="oninput"
                    @bind="@MessageToSend.Text"
                    class="message-text-input ibm-plex-mono-regular" type="text" placeholder="слово"/>
                <div class="message-input-separator">
                </div>
                @*ready to clear*@
                <input 
                    @bind:event="oninput" 
                    @bind="@MessageToSend.Count"
                    class="message-number-input ibm-plex-mono-bold text-center" type="number"/>
            </div>
            @*ready to clear*@
            <button disabled="@(!IsMessageValid)" class="text-dark message-input-button ibm-plex-mono-bold" style="background-color: @GetButtonColor()">Відправити</button>
        </div>
    }   
</div>
@code {
    [Parameter]
    public ColorStyle SendButtonColor { get; set; } = ColorStyle.Red;

    [Parameter]
    public bool IsCaptian { get; set; } = true;

    protected string GetButtonColor()
    {
        if (!IsMessageValid)
        {
            return Resources.TransparentColor(ColorStyle.White, 0.5);
        } else
        {
            return Resources.Color(SendButtonColor);
        }
    }
    List<MessageDto> messages = new();

    public MessageDto MessageToSend { get; set; } = new();

    public bool IsMessageValid { get {
            if(MessageToSend is not null && MessageToSend.Count > 0 && !string.IsNullOrEmpty(MessageToSend.Text))
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }

    protected override void OnInitialized()
    {
        messages.Add(new MessageDto()
        {
            Text = "якесь_слово",
            Count = 2,
            Color = ColorStyle.Green,
            From = new UserDto("chokopie")
        });
        messages.Add(new MessageDto()
        {
            Text = "якесь_словоsad",
            Count = 3,
            Color = ColorStyle.Blue,
            From = new UserDto("solify")
        });
        messages.Add(new MessageDto()
        {
            Text = "якесь_слово",
            Count = 1,
            Color = ColorStyle.Green,
            From = new UserDto("chokopie")
        });
        messages.Add(new MessageDto()
        {
            Text = "якесь_слово",
            Count = 2,
            Color = ColorStyle.Red,
            From = new UserDto("kirgo")
        });
    }



}
